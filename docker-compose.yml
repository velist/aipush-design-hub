# AI Push PocketBase Docker配置
version: '3.8'

services:
  # PocketBase主服务
  pocketbase:
    image: ghcr.io/muchobien/pocketbase:latest
    container_name: aipush-pocketbase
    restart: unless-stopped
    command: 
      - --http=0.0.0.0:8080
      - --dir=/pb_data
      - --publicDir=/pb_public
    environment:
      - DOMAIN=aipush.fun
      - API_DOMAIN=api.aipush.fun
    ports:
      - "8080:8080"
    volumes:
      - pocketbase_data:/pb_data
      - pocketbase_public:/pb_public
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: aipush-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites/:/etc/nginx/conf.d/:ro
      - certbot_certs:/etc/letsencrypt
      - certbot_webroot:/var/www/certbot
    depends_on:
      - pocketbase
    command: >
      sh -c "nginx -g 'daemon off;'"

  # SSL证书自动申请和续期
  certbot:
    image: certbot/certbot
    container_name: aipush-certbot
    volumes:
      - certbot_certs:/etc/letsencrypt
      - certbot_webroot:/var/www/certbot
    command: >
      sh -c "
        trap exit TERM
        while :; do
          certbot renew --webroot --webroot-path=/var/www/certbot --quiet
          sleep 12h & wait $!
        done
      "
    depends_on:
      - nginx

  # 数据备份服务
  backup:
    image: alpine:latest
    container_name: aipush-backup
    restart: unless-stopped
    volumes:
      - pocketbase_data:/data:ro
      - ./backups:/backups
    command: >
      sh -c "
        apk add --no-cache tar gzip
        while :; do
          tar -czf /backups/backup-$(date +%Y%m%d_%H%M%S).tar.gz -C /data .
          # 保留最近7天的备份
          find /backups -name '*.tar.gz' -mtime +7 -delete
          sleep 24h
        done
      "
    depends_on:
      - pocketbase

volumes:
  pocketbase_data:
    driver: local
  pocketbase_public:
    driver: local  
  certbot_certs:
    driver: local
  certbot_webroot:
    driver: local

networks:
  default:
    driver: bridge